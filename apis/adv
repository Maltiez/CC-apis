--Api универсальный--
version='0.4.3'
--UNIVERSAL--
--Доп.функции--
function startSession()
	term.clear()
	term.setCursorPos(1,1)
	print('ADV '..version..' ID: '..os.getComputerID())
end
--Функции связи--
function sendMess(id,mess,addValue)--Функция отправки сообщения: id - адресат, mess - сообщение либо путь передаваемого файла, при addValue="file".
	if addValue=="file" then
		local f=fs.open(mess,'r')
		local fileCont=f.readAll()
		f.close()
		rednet.send(id,const.SFile)
		rednet.send(id,fs.getName(mess))
		return rednet.send(id,mess)
	else
		return rednet.send(id,mess)
	end
end
function getMess(id,addValue)--Функция приема сообщения: id - адресант, addValue - папка, в которую будут сохраняться файлы (в случае отсутствии папки по указанному пути, она будет создана).
	local stopReceiveing=false
	while not stopReceiveing do
		local input_id,mess=rednet.receive()
		if input_id==id then
			if mess==const.SFile then
				local boolID=false
				while not boolID do
					id_input,mess=rednet.receive()
					boolID=(id_input==id)
				end
				if not fs.isDir(addValue) then
					fs.makeDir(addValue)
				end
				local f=fs.open(fs.combine(addValue,mess),'w')
				while not boolID do
					id_input,mess=rednet.receive()
					boolID=(id_input==id)
				end
				f.write(mess)
				f.close()
				stopReceiveing=true
				return true
			else
				stopReceiveing=true
				return mess
			end
		end
	end
end
function getFile(id,name,addValue)
	local stopReceiveing=false
	while not stopReceiveing do
		local input_id,mess=rednet.receive()
		if input_id==id then 
			stopReceiveing=true 
		end
	end
	if not fs.isDir(addValue) then
		fs.makeDir(addValue)
	end
	local f=fs.open(fs.combine(addValue,name),'w')
	f.write(mess)
	f.close()
	return true
end
--TURTLE--
--Внутренние функции (просто внутренние функции)--
local function turnDir(a,b)
	if not(type(b)==type(const.dirEast)) and not(type(b)=="number") then
		return false
	else
		if type(b)=="number" then
			b=string.sub(b,1)
		end
		if a=="left" then
			if b==const.dirEast then b=const.dirSouth else
				if b==const.dirNorth then b=const.dirEast else
					if b==const.dirWest then b=const.dirNorth else
						if b==const.dirSouth then b=const.dirWest else
							if b==const.dirUnknown then b=const.dirUnknown end
						end
					end
				end
			end
		end
		if a=="right" then
			if b==const.dirEast then b=const.dirNorth else
				if b==const.dirNorth then b=const.dirWest else
					if b==const.dirWest then b=const.dirSouth else
						if b==const.dirSouth then b=const.dirEast else
							if b==const.dirUnknown then b=const.dirUnknown end
						end
					end
				end
			end
		end
		return b
	end
end
local function turtleDir(dir)
	if dir==nil then
		if fs.exists("tdir") then
			local dFile=fs.open("tdir","r")
			local dirValue=tonumber(dFile.readLine())
			dFile.close()
			return dirValue
		else
			return const.dirUnknown
		end
	else
		local dFile=fs.open("tdir","w")
		dFile.writeLine(string.sub(dir,1))
		dFile.close()
		if fs.exists("tdir") then
			return true
		else
			return false
		end
	end
end
--Функции действия--
function exec(x) --Основная функция исполнения команд, x - массив команд.
	if type(x[1])=='string' then
		assert(loadstring('return '..x[1]..'(...)'))(x[2],x[3],x[4],x[5])
	elseif type(x[1])=='function' then
		x[1](x[2])
	elseif type(x[1])=='number' then
		for i=1,x[1] do
			exec(x[2])
		end
	elseif type(x[1])=='table' then
		for i=1,#x do
			exec(x[i])
		end
	end
end
function action(action,addValue,addValue2,addValue3)--Аргументы: action - название действия, addValue ... addValue3 - дополнительные аргументы.
	local success=true
	if action=="forward" then --Движение вперед: addValue - на сколько сдвинется черпашка, addValue2 - что будет делать черепашка если не сможет пройти.
		if addValue2=="dig" then --Черепашка будет пытаться разрушить блоки пока не пройдет.
			if not(type(addValue)=="number")then
				success=false
				while not success do
					success=turtle.forward()
					if not success then
						turtle.dig()
					end
				end
				return success,1
			else
				local i=0
				while success and (i<addValue) do
					success=false
					while not success do
						success=turtle.forward()
						if not success then
							turtle.dig()
						end
					end
					if success then 
						i=i+1
					end
				end
				return success,i
			end
		end
		if addValue2=="move" then -- Черепашка будет пытаться пройти.
			if not(type(addValue)=="number")then
				success=false
				while not success do
					success=turtle.forward()
				end
				return success,1
			else
				local i=0
				while success and (i<addValue) do
					success=false
					while not success do
						success=turtle.forward()
					end
					if success then 
						i=i+1
					end
				end
				return success,i
			end
		end
		if (addValue2==nil) or (addValue2=="") then -- Черепашка остановится если не сможет пройти.
			if not(type(addValue)=="number")then
				success=turtle.forward()
				return success,1
			else
				local i=0
				while success and (i<addValue) do
					success=false
					success=turtle.forward()
					if success then 
						i=i+1
					end
				end
				return success,i
			end
		end
	end
	if action=="back" then --Движение назад: addValue - на сколько сдвинется черепашка, addValue2 - что будет делать черепашка если не сможет пройти.
		if addValue2=="move" then --Черепашка будет пытаться пройти.
			if not(type(addValue)=="number")then
				success=false
				while not success do
					success=turtle.back()
				end
				return success,1
			else
				local i=0
				while success and (i<addValue) do
					while not success do
						success=turtle.back()
					end
					if success then 
						i=i+1
					end
				end
				return success,i
			end
		end
		if (addValue2==nil) or (addValue2=="") then --Черепашка остановится.
			if not(type(addValue)=="number")then
				success=turtle.back()
				return success,1
			else
				local i=0
				while success and (i<addValue) do
					success=turtle.back()
					if success then 
						i=i+1
					end
				end
				return success,i
			end
		end
	end
	if action=="up" then --Движение вврех: addValue - на сколько сдвинется черепашка.
		if not(type(addValue)=="number")then
			success=turtle.up()
			return success,1
		else
			local i=0
			while success and (i<addValue) do
				success=turtle.up()
				if success then 
					i=i+1
				end
			end
			return success,i
		end
	end
	if action=="down" then --Движение вниз: addValue - на сколько сдвинется черепашка.
		if not(type(addValue)=="number")then
			success=turtle.down()
			return success,1
		else
			local i=0
			while success and (i<addValue) do
				success=turtle.down()
				if success then 
					i=i+1
				end
			end
			return success,i
		end
	end
	if action=="right" then --Поворот вправо: addValue - на сколько четвертей окружности повернется черепашка.
		if not(type(addValue)=="number")then
			turtle.turnRight()
			turtleDir(turnDir("right",turtleDir()))
			return true,0
		else
			for i=1, addValue do
				turtle.turnRight()
				turtleDir(turnDir("right",turtleDir()))
			end
			return true,addValue
		end
	end
	if action=="left" then --Поворот влево: addValue - на сколько четвертей окружности повернется черепашка.
		if not(type(addValue)=="number")then
			turtle.turnLeft()
			turtleDir(turnDir("left",turtleDir()))
			return true,0
		else
			for i=1, addValue do
				turtle.turnLeft()
				turtleDir(turnDir("left",turtleDir()))
			end
			return true,addValue
		end
	end
	if action=="dig" then --Разбитие блока: addValue - сторона, с которой тортилка разбивает блок, addValue2 - будет ли тортилка ждать 1 секуду определяя есть ли с стороны addValue блок, addValue3 - ячейка инвентаря в которая будет выбрана перед тем как разбить блок.
		if type(addValue3)=="number" then
			turtle.select(addValue3)
		end
		if addValue2=="true" then
			if (addValue==nil) or (addValue=="") then
				local ifNoBlock=true
				while ifNoBlock do
					turtle.dig()
					sleep(1)
					ifNoBlock=turtle.detect()
				end
				return true
			else
				if addValue=="up" then
					local ifNoBlock=true
					while ifNoBlock do
						turtle.digUp()
						sleep(1)
						ifNoBlock=turtle.detectUp()
					end
				else
					if addValue=="down" then
						local ifNoBlock=true
						while ifNoBlock do
							turtle.digDown()
							sleep(1)
							ifNoBlock=turtle.detectDown()
						end
						return true
					else
						return false
					end
				end
			end
		else
			if (addValue==nil) or (addValue=="") then
				return turtle.dig()
			else
				if addValue=="up" then
					return turtle.digUp()
				else
					if addValue=="down" then
						return turtle.digDown()
					else
						return false
					end
				end
			end
		end
	end
	if action=="place" then --Установка блока(использование предмета): addValue - слот из которого будет установлен блок, addValue2 - сторона, с которой будет установлен блок(использован предмет), addValue3 - Надпись на табличке.
		if (addValue==nil) or (addValue2=="") then
			turtle.select(addValue)
			if addValue3==nil then 
				turtle.place()
			else
				turtle.place(addValue3)
			end
		else
			if addValue2=="up" then
				turtle.select(addValue)
				return turtle.placeUp()
			else
				if addValue2=="down" then
					turtle.select(addValue)
					return turtle.placeDown()
				else
					return false
				end
			end
		end
	end
	if action=="detect" then --Определяет, есть блок со стороны addValue черепашки.
		if (addValue==nil) or (addValue=="") then
			return true,turtle.detect()
		else
			if addValue=="up" then
				return true,turtle.detectUp()
			else
				if addValue=="down" then
					return true,turtle.detectDown()
				else
					return false
				end
			end
		end
	end
	if action=="compare" then --Сравнивает предмет из слота addValue с блоком со стороны addValue2 или из слота addValue2 если addValue='to'
		if (addValue2==nil) or (addValue2=="") then
			turtle.select(addValue)
			return true,turtle.compare()
		else
			if addValue2=="up" then
				turtle.select(addValue)
				return true,turtle.comapareUp()
			else
				if addValue2=="down" then
					turtle.select(addValue)
					return true,turtle.comapareDown()
				else
					if addValue2=="to" then
						return true,turtle.comapareTo(addValue3)
					else
						return false
					end
				end
			end
		end
	end
	if action=="drop" then --Выкидывает addValue3 предметов из слота addValue2 со стороны addValue.
		if (addValue==nil) or (addValue=="") then
			turtle.select(addValue2)
			return turtle.drop(addValue3)
		else
			if addValue=="up" then
				turtle.select(addValue2)
				return turtle.dropUp(addValue3)
			else
				if addValue=="down" then
					turtle.select(addValue2)
					return turtle.dropDown(addValue3)
				else
					return false
				end
			end
		end
	end
	if action=="suck" then --Забирает предметы в слот addValue со стороны addValue2
		if (addValue2==nil) or (addValue2=="") then
			turtle.select(addValue)
			return turtle.suck()
		else
			if addValue2=="up" then
				turtle.select(addValue)
				return turtle.suckUp()
			else
				if addValue2=="down" then
					turtle.select(addValue)
					return turtle.suckDown()
				else
					return false
				end
			end
		end
	end
	if action=="refuel" then --Заправляет черепашку из слота addValue addValue2 раз.
		turtle.select(addValue)
		return turtler.refuel(addValue2)
	end
	if action=="get" then --Возвращает кол-во addValue в слоте addValue2, или кол-во топлива,общее кол-во предметов и общее кол-во предметов до завершения всех стаков, если addValue=''
		if (addValue==nil) or (addValue=="") then
			local iCount,sCount=0,0
			for i=1,16 do
				iCount=iCount+turtle.getItemCount(i)
				sCount=sCount+turtle.getItemSpace(i)
			end
			return true,turtle.getFuelLevel(),iCount,sCount
		else
			if addValue=="fuel" then
				return true,turtle.getFuelLevel()
			else
				if addValue=="item" then
					return true,turtle.getItemCount(addValue2)
				else
					if addValue=="spase" then
						return true,turtle.getSpaceCount(addValue2)
					else
						return false
					end
				end
			end
		end
	end
	if action=="transfer" then --Перемещает предметы из слота addValue в слот addValue2
		return turtle.transferTo(addValue,addValue2)
	end
	if action=="attack" then --Атакует со стороны addValue
		if (addValue==nil) or (addValue=="") then
			return turtle.attack()
		else
			if addValue=="up" then
				return turtle.attackUp()
			else
				if addValue=="down" then
					return turtle.attackDown()
				else
					return false
				end
			end
		end
	end
	if action=="craft" then --Крафтит addValue предметов.
		return turtle.craft(addValue)
	end
end
function move(direction,n)--Аргументы: direction - направление движения, n - на сколько сдвинеться черепашка
	local success=true
	if direction=="forward" then
		if not(type(n)=="number")then
			success=turtle.forward()
			return success,1
		else
			local i=0
			while success and (i<n) do
				success=turtle.forward()
				if success then 
					i=i+1
				end
			end
			return success,i
		end
	end
	if direction=="back" then
		if not(type(n)=="number")then
			success=turtle.back()
			return success,1
		else
			local i=0
			while success and (i<n) do
				success=turtle.back()
				if success then 
					i=i+1
				end
			end
			return success,i
		end
	end
	if direction=="up" then
		if not(type(n)=="number")then
			success=turtle.up()
			return success,1
		else
			local i=0
			while success and (i<n) do
				success=turtle.up()
				if success then 
					i=i+1
				end
			end
			return success,i
		end
	end
	if direction=="down" then
		if not(type(n)=="number")then
			success=turtle.down()
			return success,1
		else
			local i=0
			while success and (i<n) do
				success=turtle.down()
				if success then 
					i=i+1
				end
			end
			return success,i
		end
	end
	if direction=="right" then
		local mScs=false
		if not(type(n)=="number")then
			turtle.turnRight()
			turtleDir(turnDir("right",turtleDir()))
			return true,0
		else
			turtle.turnRight()
			turtleDir(turnDir("right",turtleDir()))
			local success=true
			local i=0
			while success and (i<n) do
				success=turtle.forward()
				if success then 
					mScs=true
					i=i+1
					if i==n then
						return true,n
					end
				else
					if i==0 then
						success=turtle.turnLeft()
						turtleDir(turnDir("left",turtleDir()))
					end
					return false,i
				end
			end
		end
	end
	if direction=="left" then
		local mScs=false
		if not(type(n)=="number")then
			turtle.turnLeft()
			turtleDir(turnDir("left",turtleDir()))
			return true,0
		else
			turtle.turnLeft()
			turtleDir(turnDir("left",turtleDir()))
			local success=true
			local i=0
			while success and (i<n) do
				success=turtle.forward()
				if success then 
					mScs=true
					i=i+1
					if i==n then
						return true,n
					end
				else
					if i==0 then
						success=turtle.turnRight()
						turtleDir(turnDir("right",turtleDir()))
					end
					return false,i
				end
			end
		end
	end
end
function turn(direction,n)--Аргументы: direction - направление, n - угол на который повернётся черепашка = n*90градусов
	if direction=="left" then --Поворот по часовой стрелке(вид сверху)
		if not(type(n)=="number")then
			local success=turtle.turnLeft()
			if success then 
				turtleDir(turnDir("left",turtleDir()))
			end
			return success,1
		else
			local i=0
			local success=true
			while success and (i<n) do
				success=turtle.turnLeft()
				if success then 
					i=i+1
					turtleDir(turnDir("left",turtleDir()))
				end
			end
			return success,i
		end
	end
	if direction=="right" then --Поворот против часовой стрелки (вид сверху)
		if not(type(n)=="number")then
			local success=turtle.turnRight()
			if success then 
				turtleDir(turnDir("right",turtleDir()))
			end
			return success,1
		else
			local i=0
			while success and (i<n) do
				success=turtle.turnRight()
				if success then 
					turtleDir(turnDir("right",turtleDir()))
					i=i+1
				end
			end
			return success,i
		end
	end
end
--Функции для exec--
function rnopen(x)
	local d
	if type(x)=="table" then
		d=x[1]
	else
		d=x
	end
	rednet.open(d)
end
function send(x)
	local id=x[1]
	local mess=x[2]
	local addValue=x[3]
	if addValue=="file" then
		local f=fs.open(mess,'r')
		local fileCont=f.readAll()
		f.close()
		rednet.send(id,const.SFile)
		rednet.send(id,fs.getName(mess))
		rednet.send(id,mess)
	else
		rednet.send(id,mess)
	end
end
function file(x)
	local id,name,dir
	if type(x)=="table" then
		id=x[1]
		name=x[2]
		dir=x[3]
	else
		id=x
		name=x
		dir=nil
	end
	getFile(id,name,dir)
end
function forward(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	local success=true
	if addValue2=='dig' then --Черепашка будет пытаться разрушить блоки пока не пройдет.
		if not(type(addValue)=="number")then
			success=false
			while not success do
				success=turtle.forward()
				if not success then
					turtle.dig()
				end
			end
		else
			local i=0
			while success and (i<addValue) do
				success=false
				while not success do
				success=turtle.forward()
				if not success then
					turtle.dig()
				end
			end
				if success then 
					i=i+1
				end
			end
		end
	elseif addValue2=="move" then -- Черепашка будет пытаться пройти.
		if not(type(addValue)=="number")then
			success=false
			while not success do
				success=turtle.forward()
			end
		else
			local i=0
			while success and (i<addValue) do
				success=false
				while not success do
					success=turtle.forward()
				end
				if success then 
					i=i+1
				end
			end
		end
	elseif (addValue2==nil) or (addValue2=="") then -- Черепашка остановится если не сможет пройти.
		if not(type(addValue)=="number")then
			success=turtle.forward()
		else
			local i=0
			while success and (i<addValue) do
				success=false
				success=turtle.forward()
				if success then 
					i=i+1
				end
			end
		end
	end
end
function back(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	local success=true
	if addValue2=="move" then --Черепашка будет пытаться пройти.
		if not(type(addValue)=="number")then
			success=false
			while not success do
				success=turtle.back()
			end
		else
			local i=0
			while success and (i<addValue) do
				while not success do
					success=turtle.back()
				end
				if success then 
					i=i+1
				end
			end
		end
	elseif (addValue2==nil) or (addValue2=="") then --Черепашка остановится.
		if not(type(addValue)=="number")then
			success=turtle.back()
		else
			local i=0
			while success and (i<addValue) do
				success=turtle.back()
				if success then 
					i=i+1
				end
			end
		end
	end
end
function up(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	local success=true
	if addValue2=="dig" then
		for i=1,addValue do
			success=turtle.up()
			while not success do
				turtle.digUp()
				success=turtle.up()
			end
		end
	elseif addValue2=="move" then
		for i=1,addValue do
			success=turtle.up()
			while not success do
				success=turtle.up()
			end
		end
	else
		if not(type(addValue)=="number")then
			success=turtle.up()
		else
			local i=0
			while success and (i<addValue) do
				success=turtle.up()
				if success then 
					i=i+1
				end
			end
		end
	end
end
function down(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	local success=true
	if addValue2=="dig" then
		for i=1,addValue do
			success=turtle.down()
			while not success do
				turtle.digDown()
				success=turtle.down()
			end
		end
	elseif addValue2=="move" then
		for i=1,addValue do
			success=turtle.down()
			while not success do
				success=turtle.down()
			end
		end
	else
		if not(type(addValue)=="number")then
			success=turtle.down()
		else
			local i=0
			while success and (i<addValue) do
				success=turtle.down()
				if success then 
					i=i+1
				end
			end
		end
	end
end
function right(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if not(type(addValue)=="number")then
		turtle.turnRight()
		--turtleDir(turnDir("right",turtleDir()))
	else
		for i=1, addValue do
			turtle.turnRight()
			--turtleDir(turnDir("right",turtleDir()))
		end
	end
end
function left(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if not(type(addValue)=="number")then
		turtle.turnLeft()
		--turtleDir(turnDir("left",turtleDir()))
	else
		for i=1, addValue do
			turtle.turnLeft()
			--turtleDir(turnDir("left",turtleDir()))
		end
	end
end
function dig(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if type(addValue3)=="number" then
		turtle.select(addValue3)
	end
	if addValue2=="true" then
		if (addValue==nil) or (addValue=="") then
			local ifNoBlock=true
			while ifNoBlock do
				turtle.dig()
				sleep(1)
				ifNoBlock=turtle.detect()
			end
		else
			if addValue=="up" then
				local ifNoBlock=true
				while ifNoBlock do
					turtle.digUp()
					sleep(1)
					ifNoBlock=turtle.detectUp()
				end
			else
				if addValue=="down" then
					local ifNoBlock=true
					while ifNoBlock do
						turtle.digDown()
						sleep(1)
						ifNoBlock=turtle.detectDown()
					end
				end
			end
		end
	else
		if (addValue==nil) or (addValue=="") then
			turtle.dig()
		else
			if addValue=="up" then
				turtle.digUp()
			else
				if addValue=="down" then
					turtle.digDown()
				end
			end
		end
	end
end
function place(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if (addValue2==nil) or (addValue2=="") then
		turtle.select(addValue)
		if addValue3==nil then 
			turtle.place()
		else
			turtle.place(addValue3)
		end
	else
		if addValue2=="up" then
			turtle.select(addValue)
			turtle.placeUp()
		else
			if addValue2=="down" then
				turtle.select(addValue)
				turtle.placeDown()
			end
		end
	end
end
function detect(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[2]
		addValue2=x[1]
		addValue3=x[3]
	else
		addValue=nil
		addValue2=x
		addValue3=nil
	end
	if (addValue==nil) or (addValue=="") then
		rednet.send(addValue2,turtle.detect())
	else
		if addValue=="up" then
			rednet.send(addValue2,turtle.detectUp())
		else
			if addValue=="down" then
				rednet.send(addValue2,turtle.detectDown())
			end
		end
	end
end
function compare(x)
	local addValue,addValue2,addValue3,addValue4
	if type(x)=="table" then
		addValue=x[2]
		addValue2=x[3]
		addValue3=x[4]
		addValue4=x[1]
	else
		addValue=nil
		addValue2=nil
		addValue3=nil
		addValue4=x
	end
	if (addValue2==nil) or (addValue2=="") then
		turtle.select(addValue)
		rednet.send(addValue4,turtle.compare())
	else
		if addValue2=="up" then
			turtle.select(addValue)
			rednet.send(addValue4,turtle.comapareUp())
		else
			if addValue2=="down" then
				turtle.select(addValue)
				rednet.send(addValue4,turtle.comapareDown())
			else
				if addValue2=="to" then
					rednet.send(addValue4,turtle.comapareTo(addValue3))
				end
			end
		end
	end
end
function drop(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if type(addValue2)=='table' then
		if type(addValue3)=='table' then
			for i=1,#addValue2 do
				if (addValue==nil) or (addValue=="") then
					turtle.select(addValue2[i])
					turtle.drop(addValue3[i])
				else
					if addValue=="up" then
						turtle.select(addValue2[i])
						turtle.dropUp(addValue3[i])
					else
						if addValue=="down" then
							turtle.select(addValue2[i])
							turtle.dropDown(addValue3[i])
						end
					end
				end
			end
		else
			for i=1,#addValue2 do
				if (addValue==nil) or (addValue=="") then
					turtle.select(addValue2[i])
					turtle.drop(addValue3)
				else
					if addValue=="up" then
						turtle.select(addValue2[i])
						turtle.dropUp(addValue3)
					else
						if addValue=="down" then
							turtle.select(addValue2[i])
							turtle.dropDown(addValue3)
						end
					end
				end
			end
		end
	else
		if (addValue==nil) or (addValue=="") then
			turtle.select(addValue2)
			turtle.drop(addValue3)
		else
			if addValue=="up" then
				turtle.select(addValue2)
				turtle.dropUp(addValue3)
			else
				if addValue=="down" then
					turtle.select(addValue2)
					turtle.dropDown(addValue3)
				end
			end
		end
	end
end
function suck(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if (addValue==nil) or (addValue=="") then
		turtle.select(addValue2)
		turtle.suck()
	else
		if addValue=="up" then
			turtle.select(addValue2)
			turtle.suckUp()
		else
			if addValue=="down" then
				turtle.select(addValue2)
				turtle.suckDown()
			end
		end
	end
end
function refuel(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	turtle.select(addValue)
	turtle.refuel(addValue2)
end
function get(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[2]
		addValue2=x[1]
		addValue3=x[3]
	else
		addValue=nil
		addValue2=x
		addValue3=nil
	end
	if (addValue==nil) or (addValue=="") then
		local iCount,sCount=0,0
		for i=1,16 do
			iCount=iCount+turtle.getItemCount(i)
			sCount=sCount+turtle.getItemSpace(i)
		end
		fCount=turtle.getFuelLevel()
		rednet.send(addValue2,{fCount,iCount,sCount})
	else
		if addValue=="fuel" then
			rednet.send(addValue2,turtle.getFuelLevel())
		else
			if addValue=="item" then
				rednet.send(addValue2,turtle.getItemCount(addValue2))
			else
				if addValue=="spase" then
					rednet.send(addValue2,turtle.getSpaceCount(addValue2))
				end
			end
		end
	end
end
function transfer(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	turtle.transferTo(addValue,addValue2)
end
function attack(x)
	local addValue,addValue2,addValue3
	if type(x)=="table" then
		addValue=x[1]
		addValue2=x[2]
		addValue3=x[3]
	else
		addValue=x
		addValue2=nil
		addValue3=nil
	end
	if (addValue==nil) or (addValue=="") then
		turtle.attack()
	else
		if addValue=="up" then
			turtle.attackUp()
		else
			if addValue=="down" then
				turtle.attackDown()
			end
		end
	end
end
function craft(x)
	local addValue
	if type(x)=="table" then
		addValue=x[1]
	else
		addValue=x
	end
	turtle.craft(addValue)
end
function run(x)
	if type(x)=="table" then
		shell.run(x[1])
	else
		shell.run(x)
	end
end
--Функции направления--
function dir(dir) --Записывает направление dir, или возвращает его если dir=nil.
	if dir==nil then
		if fs.exists("tdir") then
			local dFile=fs.open("tdir","r")
			local dirValue=tonumber(dFile.readLine())
			dFile.close()
			return dirValue
		else
			return const.dirUnknown
		end
	else
		local dFile=fs.open("tdir","w")
		dFile.writeLine(dir)
		dFile.close()
		if fs.exists("tdir") then
			return true
		else
			return false
		end
	end
end
function findDir() --Определяет направление черепашки.
	tDir={"back","forward","left","right",true}
	tDirRev={"forward","back","back","back"}
	tDirRevTurn={false,false,"right","left"}
	local mSuccess=false
	local i=1
	local mDir
	local x0,z0,y0=gps.locate()
	while mSuccess==false do
		print(i.."."..tDir[i])
		mSuccess=move(tDir[i],1)
		mDir=i
		i=i+1
		if tDir[i]==true then
			mSuccess=true
		end
	end
	if mDir==5 then
		return false
	else
		local x,z,y=gps.locate()
		for i=1,4 do
			if i==mDir then
				move(tDirRev[i])
				if not(tDirRevTurn==false) then
					turn(tDirRevTurn[i])
				end
			end
		end
		if mDir==1 then
			if x0>x then turtleDir(const.dirEast) end
			if x0<x then turtleDir(const.dirWest) end
			if y0<y then turtleDir(const.dirNorth) end
			if y0>y then turtleDir(const.dirSouth) end
		end
		if mDir==2 then
			if x0<x then turtleDir(const.dirEast) end
			if x0>x then turtleDir(const.dirWest) end
			if y0>y then turtleDir(const.dirNorth) end
			if y0<y then turtleDir(const.dirSouth) end
		end
		if mDir==3 then
			if x0<x then turtleDir(const.dirSouth) end
			if x0>x then turtleDir(const.dirNorth) end
			if y0>y then turtleDir(const.dirEast) end
			if y0<y then turtleDir(const.dirWest) end
		end
		if mDir==4 then
			if x0>x then turtleDir(const.dirSouth) end
			if x0<x then turtleDir(const.dirNorth) end
			if y0<y then turtleDir(const.dirEast) end
			if y0>y then turtleDir(const.dirWest) end
		end	
	end
end
--TERMINAL--
--Функции создания массивов команд--
function addFZone(x0,y0,z0,x,y,z)
	local fList=fs.list('')
	local isFZList=false
	local i=1
	while (not isFZList) or i>#fList do
		if fList[i]==const.forbiddenZoneList then
			local file=fs.open(const.forbiddenZoneList,'r')
			local isEnd=true
			while not isEnd==nil do
				isEnd=f.readLine()
			end
		end
		i=i+1
	end
end
function createWay(x0,y0,z0,x,y,z)
	local arr={}
	for iX=x0,x do
		arr[iX]={}
		for iY=y0,y do
			arr[iY]={}
			for iZ=z0,z do
				arr[iZ]=true
			end
		end
	end
	
end
--




--
